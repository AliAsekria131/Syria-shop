"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";
import Link from "next/link";

export default function Login() {
  const supabase = createClientComponentClient();
  const router = useRouter();

  // ุงูุญุงูุงุช
  const [formData, setFormData] = useState({
    email: "",
    password: "",
  });
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState([]);
  const [showPassword, setShowPassword] = useState(false);
  const [authLoading, setAuthLoading] = useState(true); // ุญุงูุฉ ุฌุฏูุฏุฉ ููุชุญูู ูู ุงููุตุงุฏูุฉ

  // ุงูุชุญูู ูู ุงููุตุงุฏูุฉ ุนูุฏ ุชุญููู ุงูุตูุญุฉ
  useEffect(() => {
    const checkAuth = async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (user) {
        router.replace("/main"); // ุงุณุชุฎุฏู replace ูุชุฌูุจ ุงูุฑุฌูุน ูุตูุญุฉ ุงูุฏุฎูู
      } else {
        setAuthLoading(false);
      }
    };

    checkAuth();
  }, [supabase, router]);

  // ุฏุงูุฉ ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
  const validateForm = () => {
    const newErrors = [];
    const { email, password } = formData;

    // ุงูุชุญูู ูู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู
    if (!email) {
      newErrors.push("ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ูุทููุจ");
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      newErrors.push("ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุบูุฑ ุตุญูุญ");
    }

    // ุงูุชุญูู ูู ูููุฉ ุงููุฑูุฑ
    if (!password) {
      newErrors.push("ูููุฉ ุงููุฑูุฑ ูุทููุจุฉ");
    } else if (password.length < 6) {
      newErrors.push("ูููุฉ ุงููุฑูุฑ ูุฌุจ ุฃู ุชููู 6 ุฃุญุฑู ุนูู ุงูุฃูู");
    }

    return newErrors;
  };

  // ุฏุงูุฉ ุชุญุฏูุซ ุงูุญููู
  const updateField = (field, value) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));

    // ุฅุฒุงูุฉ ุงูุฃุฎุทุงุก ุนูุฏ ุงููุชุงุจุฉ
    if (errors.length > 0) {
      setErrors([]);
    }
  };

  // ุฏุงูุฉ ุชุณุฌูู ุงูุฏุฎูู
  const handleLogin = async (e) => {
    e.preventDefault();

    try {
      setLoading(true);
      setErrors([]);

      // ุงูุชุญูู ูู ุตุญุฉ ุงูุจูุงูุงุช
      const validationErrors = validateForm();
      if (validationErrors.length > 0) {
        setErrors(validationErrors);
        return;
      }

      // ูุญุงููุฉ ุชุณุฌูู ุงูุฏุฎูู
      const { data, error } = await supabase.auth.signInWithPassword({
        email: formData.email.trim().toLowerCase(),
        password: formData.password,
      });

      if (error) {
        // ูุนุงูุฌุฉ ุฃุฎุทุงุก ุชุณุฌูู ุงูุฏุฎูู
        let errorMessage = "ุญุฏุซ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู";

        if (error.message.includes("Invalid login credentials")) {
          errorMessage = "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุฃู ูููุฉ ุงููุฑูุฑ ุบูุฑ ุตุญูุญุฉ";
        } else if (error.message.includes("Email not confirmed")) {
          errorMessage = "ูุฑุฌู ุชุฃููุฏ ุจุฑูุฏู ุงูุฅููุชุฑููู ุฃููุงู";
        } else if (error.message.includes("Too many requests")) {
          errorMessage = "ูุญุงููุงุช ูุซูุฑุฉุ ูุฑุฌู ุงููุญุงููุฉ ูุงุญูุงู";
        } else if (error.message.includes("Email address not confirmed")) {
          errorMessage =
            "ูุฑุฌู ุชุฃููุฏ ุญุณุงุจู ูู ุฎูุงู ุงูุฑุณุงูุฉ ุงููุฑุณูุฉ ุฅูู ุจุฑูุฏู ุงูุฅููุชุฑููู";
        }

        setErrors([errorMessage]);
        return;
      }

      // ุงูุชูุฌู ุฅูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
      router.push("/main");
    } catch (err) {
      console.error("Login error:", err);
      setErrors(["ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน"]);
    } finally {
      setLoading(false);
    }
  };

  // ุนุฑุถ ุดุงุดุฉ ุชุญููู ุฃุซูุงุก ุงูุชุญูู ูู ุงููุตุงุฏูุฉ
  if (authLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="w-12 h-12 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">ุฌุงุฑู ุงูุชุญูู ูู ุงูุฌูุณุฉ...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white rounded-lg shadow-xl p-8">
        {/* ุฑุฃุณ ุงูุตูุญุฉ */}
        <div className="text-center mb-8">
          <Link href="/" className="inline-block mb-4">
            <div className="text-4xl">๐๏ธ</div>
          </Link>
          <h1 className="text-3xl font-bold text-gray-800 mb-2">
            ูุฑุญุจุงู ุจู ูุฌุฏุฏุงู
          </h1>
          <p className="text-gray-600">ุณุฌู ุฏุฎููู ูููุตูู ุฅูู ุญุณุงุจู</p>
        </div>

        {/* ุนุฑุถ ุงูุฃุฎุทุงุก */}
        {errors.length > 0 && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            {errors.map((error, index) => (
              <p
                key={index}
                className="text-red-600 text-sm flex items-center gap-2"
              >
                <span>โ</span>
                {error}
              </p>
            ))}
          </div>
        )}

        {/* ูููุฐุฌ ุชุณุฌูู ุงูุฏุฎูู */}
        <form onSubmit={handleLogin} className="space-y-6">
          {/* ุงูุจุฑูุฏ ุงูุฅููุชุฑููู */}
          <div>
            <label className="block text-gray-700 text-sm font-bold mb-2">
              ุงูุจุฑูุฏ ุงูุฅููุชุฑููู *
            </label>
            <input
              type="email"
              placeholder="example@email.com"
              value={formData.email}
              onChange={(e) => updateField("email", e.target.value)}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all"
              disabled={loading}
              required
            />
          </div>

          {/* ูููุฉ ุงููุฑูุฑ */}
          <div>
            <label className="block text-gray-700 text-sm font-bold mb-2">
              ูููุฉ ุงููุฑูุฑ *
            </label>
            <div className="relative">
              <input
                type={showPassword ? "text" : "password"}
                placeholder="โขโขโขโขโขโขโขโข"
                value={formData.password}
                onChange={(e) => updateField("password", e.target.value)}
                className="w-full p-3 pr-12 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-400 focus:border-transparent transition-all"
                disabled={loading}
                required
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 transition-colors"
                disabled={loading}
                tabIndex="-1"
              >
                {showPassword ? "๐" : "๐๏ธ"}
              </button>
            </div>
          </div>

          {/* ุฑุงุจุท ูุณูุช ูููุฉ ุงููุฑูุฑ */}
          <div className="text-right">
            <Link
              href="/auth/forgot-password"
              className="text-blue-500 hover:text-blue-600 text-sm font-medium hover:underline transition-colors"
            >
              ูุณูุช ูููุฉ ุงููุฑูุฑุ
            </Link>
          </div>

          {/* ุฒุฑ ุชุณุฌูู ุงูุฏุฎูู */}
          <button
            type="submit"
            disabled={loading}
            className={`w-full py-3 rounded-lg text-white font-bold transition-all ${
              loading
                ? "bg-gray-400 cursor-not-allowed"
                : "bg-blue-500 hover:bg-blue-600 hover:shadow-lg transform hover:-translate-y-0.5"
            }`}
          >
            {loading ? (
              <div className="flex items-center justify-center gap-2">
                <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                ุฌุงุฑู ุชุณุฌูู ุงูุฏุฎูู...
              </div>
            ) : (
              <div className="flex items-center justify-center gap-2">
                <span>๐</span>
                ุชุณุฌูู ุงูุฏุฎูู
              </div>
            )}
          </button>
        </form>

        {/* ุฑูุงุจุท ุฅุถุงููุฉ */}
        <div className="mt-8 text-center space-y-4">
          <div className="text-gray-600">
            ููุณ ูุฏูู ุญุณุงุจุ{" "}
            <Link
              href="/signup"
              className="text-blue-500 hover:text-blue-600 font-semibold hover:underline transition-colors"
            >
              ุฃูุดุฆ ุญุณุงุจ ุฌุฏูุฏ
            </Link>
          </div>

          <div className="text-gray-600">
            <Link
              href="/"
              className="text-gray-500 hover:text-gray-700 hover:underline transition-colors inline-flex items-center gap-1"
            >
              <span>โ</span>
              ุงูุนูุฏุฉ ููุตูุญุฉ ุงูุฑุฆูุณูุฉ
            </Link>
          </div>
        </div>

        {/* ูุนูููุงุช ุฅุถุงููุฉ */}
        <div className="mt-8 text-center text-xs text-gray-500">
          ุจุชุณุฌูู ุฏุฎูููุ ูุฅูู ุชูุงูู ุนูู ุดุฑูุท ุงูุฎุฏูุฉ ูุณูุงุณุฉ ุงูุฎุตูุตูุฉ
        </div>

        {/* ูุนูููุงุช ุงูุฃูุงู */}
        <div className="mt-4 text-center">
          <div className="inline-flex items-center gap-2 text-xs text-gray-500">
            <span>๐</span>
            <span>ุชุณุฌูู ุฏุฎูู ุขูู ููุดูุฑ</span>
          </div>
        </div>
      </div>
    </div>
  );
}
